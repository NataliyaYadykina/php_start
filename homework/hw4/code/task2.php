<?php

// Дан код:

// class A {
// public function foo() {
// static $x = 0;
// echo ++$x;
// }
// }
// $a1 = new A();
// $a2 = new A();
// $a1->foo();
// $a2->foo();
// $a1->foo();
// $a2->foo();

// Что он выведет на каждом шаге? Почему?

// Немного изменим п.5

// class A {
// public function foo() {
// static $x = 0;
// echo ++$x;
// }
// }
// class B extends A {
// }
// $a1 = new A();
// $b1 = new B();
// $a1->foo();
// $b1->foo();
// $a1->foo();
// $b1->foo();

// Что он выведет теперь?




// class A
// {
//     public function foo()
//     {
//         static $x = 0;
//         echo ++$x;
//     }
// }

// $a1 = new A();
// $a2 = new A();
// $a1->foo(); // Output: 1
// $a2->foo(); // Output: 2
// $a1->foo(); // Output: 3
// $a2->foo(); // Output: 4



class A
{
    public function foo()
    {
        static $x = 0;
        echo ++$x;
    }
}

class B extends A {}

$a1 = new A();
$b1 = new B();
$a1->foo(); // Output: 1
$b1->foo(); // Output: 2
$a1->foo(); // Output: 3
$b1->foo(); // Output: 4


/*
Ответ: вывод не изменился.
В обоих случаях переменная $x является статической в методе foo(), что означает,
что она принадлежит классу А, а не экземпляру объекта.
Для всех экземпляров, включая наследников, используется одна и та же переменная.
Так как у каждого объекта вызывается одна и та же статическая переменная $x,
она сохраняет свое значение между вызовами, увеличиваясь на 1 при каждом вызове,
согласно логике метода foo().
*/
